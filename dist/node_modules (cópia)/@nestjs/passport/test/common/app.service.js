"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppService = void 0;
const common_1 = require("@nestjs/common");
const jwt_1 = require("@nestjs/jwt");
let AppService = class AppService {
    constructor(jwtService) {
        this.jwtService = jwtService;
        this.users = [
            {
                id: '1',
                username: 'test1',
                password: 'test'
            },
            {
                id: '2',
                username: 'nottest1',
                password: 'secret'
            }
        ];
    }
    getHello() {
        return { message: 'Hello open world!' };
    }
    getPrivateMessage() {
        return { message: 'Hello secure world!' };
    }
    getToken({ username, id }) {
        return { token: this.jwtService.sign({ username, id }) };
    }
    findUser({ username, password }) {
        const user = this.users.find((u) => u.username === username);
        if (!user || user.password !== password) {
            return null;
        }
        return user;
    }
};
AppService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [jwt_1.JwtService])
], AppService);
exports.AppService = AppService;
//# sourceMappingURL=app.service.js.map