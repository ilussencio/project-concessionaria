"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPreset = exports.loadPlugin = exports.resolvePreset = exports.resolvePlugin = exports.ROOT_CONFIG_FILENAMES = exports.resolveShowConfigPath = exports.loadConfig = exports.findRootConfig = exports.findRelativeConfig = exports.findPackageData = exports.findConfigUpwards = void 0;
function findConfigUpwards(rootDir) {
    return null;
}
exports.findConfigUpwards = findConfigUpwards;
function* findPackageData(filepath) {
    return {
        filepath,
        directories: [],
        pkg: null,
        isPackage: false,
    };
}
exports.findPackageData = findPackageData;
function* findRelativeConfig(pkgData, envName, caller) {
    return { config: null, ignore: null };
}
exports.findRelativeConfig = findRelativeConfig;
function* findRootConfig(dirname, envName, caller) {
    return null;
}
exports.findRootConfig = findRootConfig;
function* loadConfig(name, dirname, envName, caller) {
    throw new Error(`Cannot load ${name} relative to ${dirname} in a browser`);
}
exports.loadConfig = loadConfig;
function* resolveShowConfigPath(dirname) {
    return null;
}
exports.resolveShowConfigPath = resolveShowConfigPath;
exports.ROOT_CONFIG_FILENAMES = [];
function resolvePlugin(name, dirname) {
    return null;
}
exports.resolvePlugin = resolvePlugin;
function resolvePreset(name, dirname) {
    return null;
}
exports.resolvePreset = resolvePreset;
function loadPlugin(name, dirname) {
    throw new Error(`Cannot load plugin ${name} relative to ${dirname} in a browser`);
}
exports.loadPlugin = loadPlugin;
function loadPreset(name, dirname) {
    throw new Error(`Cannot load preset ${name} relative to ${dirname} in a browser`);
}
exports.loadPreset = loadPreset;
//# sourceMappingURL=index-browser.js.map