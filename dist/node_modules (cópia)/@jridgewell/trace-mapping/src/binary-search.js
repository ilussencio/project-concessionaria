"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.memoizedBinarySearch = exports.memoizedState = exports.lowerBound = exports.upperBound = exports.binarySearch = exports.found = void 0;
const sourcemap_segment_1 = require("./sourcemap-segment");
exports.found = false;
function binarySearch(haystack, needle, low, high) {
    while (low <= high) {
        const mid = low + ((high - low) >> 1);
        const cmp = haystack[mid][sourcemap_segment_1.COLUMN] - needle;
        if (cmp === 0) {
            exports.found = true;
            return mid;
        }
        if (cmp < 0) {
            low = mid + 1;
        }
        else {
            high = mid - 1;
        }
    }
    exports.found = false;
    return low - 1;
}
exports.binarySearch = binarySearch;
function upperBound(haystack, needle, index) {
    for (let i = index + 1; i < haystack.length; index = i++) {
        if (haystack[i][sourcemap_segment_1.COLUMN] !== needle)
            break;
    }
    return index;
}
exports.upperBound = upperBound;
function lowerBound(haystack, needle, index) {
    for (let i = index - 1; i >= 0; index = i--) {
        if (haystack[i][sourcemap_segment_1.COLUMN] !== needle)
            break;
    }
    return index;
}
exports.lowerBound = lowerBound;
function memoizedState() {
    return {
        lastKey: -1,
        lastNeedle: -1,
        lastIndex: -1,
    };
}
exports.memoizedState = memoizedState;
function memoizedBinarySearch(haystack, needle, state, key) {
    const { lastKey, lastNeedle, lastIndex } = state;
    let low = 0;
    let high = haystack.length - 1;
    if (key === lastKey) {
        if (needle === lastNeedle) {
            exports.found = lastIndex !== -1 && haystack[lastIndex][sourcemap_segment_1.COLUMN] === needle;
            return lastIndex;
        }
        if (needle >= lastNeedle) {
            low = lastIndex === -1 ? 0 : lastIndex;
        }
        else {
            high = lastIndex;
        }
    }
    state.lastKey = key;
    state.lastNeedle = needle;
    return (state.lastIndex = binarySearch(haystack, needle, low, high));
}
exports.memoizedBinarySearch = memoizedBinarySearch;
//# sourceMappingURL=binary-search.js.map